#include <SPI.h>

// Constants for the BME280 registers
const uint8_t BME280_REG_ID = 0xD0;
const uint8_t BME280_REG_RESET = 0xE0;
const uint8_t BME280_REG_CTRL_HUM = 0xF2;
const uint8_t BME280_REG_CTRL_MEAS = 0xF4;
const uint8_t BME280_REG_CONFIG = 0xF5;
const uint8_t BME280_REG_DATA = 0xF7;

// Constants for the BME280 configuration
const uint8_t BME280_CONFIG_T_SB = 0x05; // 62.5 ms standby time
const uint8_t BME280_CONFIG_FILTER = 0x03; // 16x filter coefficient

// Constants for the BME280 control measurement
const uint8_t BME280_CTRL_MEAS_OSRS_T = 0x01; // x1 temperature oversampling
const uint8_t BME280_CTRL_MEAS_OSRS_P = 0x01; // x1 pressure oversampling
const uint8_t BME280_CTRL_MEAS_MODE = 0x03; // normal mode

// Constants for the BME280 control humidity
const uint8_t BME280_CTRL_HUM_OSRS_H = 0x01; // x1 humidity oversampling

// Pin constants
const uint8_t BME280_SS_PIN = 10;

// Global variables
uint8_t bme280_id;
int16_t bme280_temp;
uint16_t bme280_hum;
uint32_t bme280_pres;

void setup() {
  // Initialize the SPI bus
  SPI.begin();
  
  // Set the slave select pin as an output
  pinMode(BME280_SS_PIN, OUTPUT);

  // Reset the BME280
  digitalWrite(BME280_SS_PIN, LOW);
  SPI.transfer(BME280_REG_RESET | 0x80);
  SPI.transfer(0xB6);
  digitalWrite(BME280_SS_PIN, HIGH);
  delay(10);

  // Read the BME280 ID
  digitalWrite(BME280_SS_PIN, LOW);
  SPI.transfer(BME280_REG_ID | 0x80);
  bme280_id = SPI.transfer(0x00);
  digitalWrite(BME280_SS_PIN, HIGH);
  
  // Set up the BME280 configuration
  digitalWrite(BME280_SS_
